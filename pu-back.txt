# pages/purchases.py
import os, sys, logging, dash
from dash import html, dash_table, Input, Output
from flask import session
import pandas as pd
from database import fetch_user_purchases

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(current_dir)
if root_dir not in sys.path:
    sys.path.append(root_dir)

dash.register_page(__name__, path='/purchases', name='Покупки')

# Предустановка: выравнивание столбца price по правому краю
style_cc = [
    {'if': {'column_id': 'price'}, 'textAlign': 'right'},
    {'if': {'column_id': 'ts'}, 'textAlign': 'right'}
]

layout = html.Div([
    html.H2("Ваши покупки"),
    html.Div(id='table-info'),
    dash_table.DataTable(
        id='purchases-table',
        data=[],
        columns=[],
        editable=True,
        page_size=20,
        filter_action="native",
        filter_options={'case': 'insensitive'},
        sort_action="native",
        fill_width=False,
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left', 'whiteSpace': 'normal'},
        style_cell_conditional=style_cc
    )
])

@dash.callback(
    Output('table-info', 'children'),
    Output('purchases-table', 'data'),
    Output('purchases-table', 'columns'),
    Input('url', 'pathname'),
)
def load_purchases(pathname):
    logger.info(f"Callback for: {pathname}")
    if not pathname or not pathname.endswith('/purchases'):
        return dash.no_update, dash.no_update, dash.no_update

    user_id = session.get('user_id')
    if not user_id:
        logger.warning("User not authorized")
        return "❌ Не авторизован", [], []

    purchases = fetch_user_purchases(user_id)
    count = len(purchases)
    logger.info(f"Rows fetched: {count}")

    if count == 0:
        return "ℹ️ Нет покупок", [], []

    df = pd.DataFrame(purchases)

    date_cols = []
    for col in df.columns:
        key = col.lower()
        if 'date' in key or key in ('ts', 'timestamp') or key.endswith('_ts'):
            df[col] = pd.to_datetime(df[col]).dt.strftime('%d.%m.%y')
            date_cols.append(col)

    # обновляем правила выравнивания для всех date_cols
    for col in date_cols:
        style_cc.append({'if': {'column_id': col}, 'textAlign': 'right'})

    data = df.to_dict('records')
    columns = [
        {"name": col, "id": col, "editable": True,
         "type": 'datetime' if col in date_cols else ('numeric' if col == 'price' else 'text')}
        for col in df.columns
    ]

    info = f"Получено строк: {count}"
    return info, data, columns
